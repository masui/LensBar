#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <gl.h>
#include <gl/device.h>
#include <fmclient.h>
#include <strings.h>

#include "lensbar.h"
#include "font.h"
#include "graphics.h"

#define LBBGCOLOR	0xc0ffff
#define LBTEXTCOLOR	0x000000
#define LBSELCOLOR	0xc0c0c0
#define LBGAPCOLOR	0x608888

static int
displine(LensBar *lb, int line, int x, int y, int displayp);

LensBar *
newlb(char **words, char **pats, int nitems, int x, int y, int width, int height)
{
	int i,n;
	LensBar *lb;
	lb = (LensBar*)malloc(sizeof(LensBar));

	lb->x = x;
	lb->y = y;
	lb->width = width;
	lb->height = height;
	lb->words = words;
	lb->pats = pats;
	lb->oldpat[0] = '\0';

	lb->margin = 20;
	lb->sbx = lb->x + lb->margin;
	lb->sby = lb->y + lb->margin;
	lb->sbwidth = 30;
	lb->sbheight = lb->height - 2 * lb->margin;
	lb->marginx = 5;
	lb->marginy = 20;
	lb->boxx = lb->sbx + lb->marginx;
	lb->boxy = lb->sby + lb->marginy;
	lb->boxwidth = lb->sbwidth - 2 * lb->marginx;
	lb->boxheight = lb->sbheight - 2 * lb->marginy;
	lb->knobmargin = 15;
	lb->knobwidth = lb->sbwidth - 2 * (lb->marginx + 5);
	lb->knobx = lb->sbx + lb->marginx + 5;

	lb->svx = lb->sbx + lb->sbwidth + /* lb->margin */ + 30;
	lb->svy = lb->y + lb->margin;
	lb->svwidth = lb->width - lb->sbwidth - 3 * lb->margin;
	lb->svheight = lb->height - 2 * lb->margin;
	lb->zoom = 0.0;
	i = 1;
	for(lb->maxzoom=0;;lb->maxzoom++){
		if(i >= nitems) break;
		i *= 2;
	}
	lb->clineposy = lb->svheight / 2;
	lb->afont = defaultafont;
	lb->kfont = defaultkfont;
	lb->lineheight = 24.0;

	lb->itemindex = lb->_itemindex+MAXITEMS;
	lb->itempos = lb->_itempos+MAXITEMS;
	lb->firstindex = 
	lb->lastindex = 0;

	lb->nitems = nitems;
	lb->matched = (char*)malloc(nitems);
	lb->displayed = (char*)malloc(nitems);
	lb->displayed1 = (char*)malloc(nitems);
	lb->clineindex = 0;
	for(lb->pow=0,n=1;n<nitems;){ /* nitemsを表現するのに必要なビット数 */
		lb->pow++;
		n *= 2;
	}
	lb->doi = (int*)calloc(nitems,sizeof(int));

	lb->displine = displine;

	calcmatch(lb," ");

	return lb;
}

void
freelb(LensBar *lb)
{
	free(lb->matched);
	free(lb->displayed);
	free(lb->displayed1);
	free(lb->doi);
	free(lb);
}

static powi(int x, int y)
{
	int result = 1;
	while(y-- > 0) result *= x;
	return result;
}

lbdisplay(LensBar *lb)
{
	int i,j,k,pow;
	int x,y;
	int firstline,lastline;
	int izoom,oldizoom;
	double fzoom;
	int idx;
	int p0,p1;
	int h;
	int lasty;
	int lasti;

	/*
		スクロールビュー表示
	*/
	izoom = (int)floor(lb->zoom);
	fzoom = lb->zoom - (double)izoom;

	// izoomのレベルとizoom+1のレベルで表示すべき行を計算
	// (izoom+1の方が表示が多いようにする)
	for(i=0;i<lb->nitems;i++){
		lb->displayed[i] = (lb->doi[i] >= izoom ? 0 : 1);
		lb->displayed1[i] = (lb->doi[i] >= izoom+1 ? 0 : 1);
	}

	pan(lb->svx,lb->svy,lb->svx +lb->svwidth,lb->svy+lb->svheight,LBBGCOLOR);
	x = 10;
	y = lb->clineposy;

	// clineindexの選択行バックグラウンド
	cpack(LBSELCOLOR);
	sboxfi(lb->svx+2, lb->svy+y-4, lb->svx+lb->svwidth-1, lb->svy+y-4+lb->lineheight);

	// clineindexの行表示
	cpack(0x000000);
	h = lb->displine(lb,lb->clineindex,lb->svx+x,lb->svy+y,YES);

	lb->itemindex[0] = lb->clineindex;
	lb->itempos[0] = y;
	lasty = y;
	lasti = lb->clineindex;

	idx = lb->clineindex;
	i=idx-1;
	p0 = lb->clineposy + h;
	lb->firstindex = 0;

	while(1){
		if(i<0) break;
		if(lb->displayed[i]){
			k = 0;
			for(j=idx-1;j>=i;j--){
				if(lb->displayed1[j]) k += lb->displine(lb,j,lb->svx+x,lb->svy+y,NO);
			}
			p1 = lb->clineposy + k;
			y = (int)((double)p1 * fzoom + (double)p0 * (1.0-fzoom));
			if(y >= lb->svheight - lb->lineheight) break;
			cpack(LBGAPCOLOR);
			if(lasti - i > 1){
			sboxfi(lb->svx + 1, lb->svy+(lasty+y+lb->lineheight-4)/2-2,
			       lb->svx + lb->svwidth - 1, lb->svy+(lasty+y+lb->lineheight-4)/2-1);
			}
			lasty = y;
			lasti = i;

			h = lb->displine(lb,i,lb->svx+x,lb->svy+y,YES);
			if(lb->firstindex < -MAXITEMS+1) break;
			lb->firstindex--;
			lb->itemindex[lb->firstindex] = i;
			lb->itempos[lb->firstindex] = y;
			p0 += h;
		}
		i--;
	}

	idx = lb->clineindex;
	lasty = lb->itempos[0];
	lasti = lb->clineindex;
	i=idx+1;
	p0 = lb->clineposy;
	lb->lastindex = 0;
	while(1){
		if(i>=lb->nitems) break;
		if(lb->displayed[i]){
			k = 0;
			for(j=idx+1;j<i;j++){
				if(lb->displayed1[j]) k += lb->displine(lb,j,lb->svx+x,lb->svy+y,NO);
			}
			p1 = lb->clineposy - k;
			y = (int)((double)p1 * fzoom + (double)p0 * (1.0-fzoom));
			h = lb->displine(lb,i,lb->svx+x,lb->svy+y,NO);
			if(y-h < 0) break;
			cpack(LBGAPCOLOR);
			if(i - lasti > 1){
				sboxfi(lb->svx + 1, lb->svy+(lasty+y-4)/2-2,
				       lb->svx + lb->svwidth - 1, lb->svy+(lasty+y-4)/2-1);
			}
			lasty = y-h;
			lasti = i;
			h = lb->displine(lb,i,lb->svx+x,lb->svy+y - h,YES);
			if(lb->lastindex >= MAXITEMS-1) break;
			lb->lastindex++; 
			lb->itemindex[lb->lastindex] = i;
			lb->itempos[lb->lastindex] = y-h;
			p0 -= h;
		}
		i++;
	}
	/*
		スクロールバー表示
	*/
	pan(lb->sbx,lb->sby,lb->sbx+lb->sbwidth,lb->sby+lb->sbheight,
		0xc0ffff);
	// スクロールバー中の1行が何マッチに相当するかを計算
	for(i=0;i<lb->boxheight;i++){
		lb->matchnum[i] = 0;
	}
	for(i=0;i<lb->nitems;i++){
		lb->matchnum[i * lb->boxheight / lb->nitems] += lb->displayed[i];
	}
	for(i=lb->boxheight-1;i>=0;i--){
		int color;
		float v1[2],v2[2];
		float density = (float)(lb->matchnum[i]) * (float)(lb->boxheight) / (float)lb->nitems;
		int displayed = 0;
		int r,g,b;
		int rl,gl,bl,rd,gd,bd;
		int dark,light,mainc;
		r = 0x80; g = 0x80; b = 0xff;
		rl = r * 3 / 2; if(rl > 0x100) rl = 255;
		gl = g * 3 / 2; if(gl > 0x100) gl = 255;
		bl = b * 3 / 2; if(bl > 0x100) bl = 255;
		rd = r / 2; if(rd > 0x100) rd = 255;
		gd = g / 2; if(gd > 0x100) gd = 255;
		bd = b / 2; if(bd > 0x100) bd = 255;
		dark = (bd << 16 | gd << 8 | rd);
		light = (bl << 16 | gl << 8 | rl);
		mainc = (b << 16 | g << 8 | r);
		if(density > 0.0){
			long v[2];
			cpack(light);
			line(lb->boxx,lb->boxy + lb->boxheight - i,
			     lb->boxx + lb->boxwidth,lb->boxy + lb->boxheight - i);
			line(lb->boxx,lb->boxy + lb->boxheight - i - 1,
			     lb->boxx + 1,lb->boxy + lb->boxheight - i - 1);
			cpack(mainc);
			line(lb->boxx + 2,lb->boxy + lb->boxheight - i - 1,
			     lb->boxx + lb->boxwidth - 2,lb->boxy + lb->boxheight - i - 1);
			cpack(dark);
			line(lb->boxx + lb->boxwidth - 1,lb->boxy + lb->boxheight - i - 1,
			     lb->boxx + lb->boxwidth,lb->boxy + lb->boxheight - i - 1);
			displayed = 1;
		}
		else {
			if(displayed){
				displayed = 0;
				cpack(dark);
				line(lb->boxx,lb->boxy + lb->boxheight - i,
				     lb->boxx + lb->boxwidth,lb->boxy + lb->boxheight - i);
			}		
			else {
				cpack(0xc0ffff);
				line(lb->boxx,lb->boxy + lb->boxheight - i,
				     lb->boxx + lb->boxwidth,lb->boxy + lb->boxheight - i);
			}
		}

	}
	// ノブ
	lastline = lb->itemindex[lb->lastindex] * lb->boxheight / lb->nitems;
	firstline = lb->itemindex[lb->firstindex] * lb->boxheight / lb->nitems;
	if(lastline - firstline < 30){
		lb->knobmargin = (30-(lastline-firstline))/2;
		lb->knobheight = 30;
		lb->knoby = lb->boxy + lb->boxheight - lastline - lb->knobmargin;
	}
	else {
		lb->knobmargin = 0;
		lb->knobheight = lastline - firstline;
		lb->knoby = lb->boxy + lb->boxheight - lastline;
	}
	transparentbutton(lb->sbx-5,lb->knoby,
		lb->sbx+lb->sbwidth+5,lb->knoby+lb->knobheight,
		lb->boxy + lb->boxheight - lastline,
		lb->boxy + lb->boxheight - firstline,
		0xa000cccc);
	{
		long v[2];
		polymode(PYM_FILL);
		blendfunction(BF_SA,BF_MSA); /* α値を働かせる */
		cpack(0xa000cccc);
		bgnpolygon();
		v[0] = lb->knobx + lb->knobwidth;
		v[0] = lb->sbx+lb->sbwidth+5,lb->knoby+lb->knobheight;
		v[1] = lb->boxy + lb->boxheight - firstline;
		v2i(v);
		v[0] = lb->svx - 1;
		v[1] = lb->svy+lb->svheight;
		v2i(v);
		v[0] = lb->svx - 1;
		v[1] = lb->svy;
		v2i(v);
		v[0] = lb->knobx + lb->knobwidth;
		v[0] = lb->sbx+lb->sbwidth+5,lb->knoby+lb->knobheight;
		v[1] = lb->boxy + lb->boxheight - lastline;
		v2i(v);
		v[0] = lb->knobx + lb->knobwidth;
		v[0] = lb->sbx+lb->sbwidth+5,lb->knoby+lb->knobheight;
		v[1] = lb->boxy + lb->boxheight - firstline;
		v2i(v);
		endpolygon();
		blendfunction(BF_ONE,BF_ZERO);
	}
}

static int   //   1行表示ルーチン。表示内容によって変更可能。
displine(LensBar *lb, int line, int x, int y, int displayp)
{
	if(displayp){
		cpack(LBTEXTCOLOR);
		printstr((float)x,(float)y,lb->words[line],
			lb->afont,lb->kfont,lb->svwidth-20);
	}
	return lb->lineheight;
}

lbmouse(LensBar *lb)
{
	long mousex,mousey;	/* マウス座標 */
	long origx,origy;	/* ウィンドウ座標 */
	long startx,starty;	/* マウス押しはじめ座標 */
	long lastx,lasty;
	long x,y;
	int origclineindex;
	int origclineposy;
	double origzoom;
	int izoom,oldizoom = -1;
	double fzoom;
	int i,sel;
	static int oldselindex = -1;
	int selindex;

	if(! getbutton(LEFTMOUSE)) return;

	mousex = getvaluator(MOUSEX);
	mousey = getvaluator(MOUSEY);
	getorigin(&origx, &origy);

	startx = x = mousex - origx;	/* ウィンドウ内座標 */
	starty = y = mousey - origy;

	origzoom = lb->zoom;
	/*
		スクロールビュー内マウス操作
	*/
	if(x >= lb->svx && x <= lb->svx + lb->svwidth &&
	   y >= lb->svy && y <= lb->svy + lb->svheight){
		sel = lb->lastindex;
		for(i=lb->firstindex;i<lb->lastindex;i++){
			if((lb->itempos[i] + lb->lineheight +
				lb->itempos[i+1]) / 2 < y - lb->svy){
				sel = i;
				break;
			}
		}
		selindex = lb->itemindex[sel];
		oldselindex = selindex;
		lb->clineindex = selindex;
		calcdoi(lb);
		origclineposy = lb->clineposy = lb->itempos[sel];
	
		while(getbutton(LEFTMOUSE)){
			int newzoom;
	
			mousex = getvaluator(MOUSEX);
			mousey = getvaluator(MOUSEY);
	
			x = mousex - origx;	/* ウィンドウ内座標 */
			y = mousey - origy;
			/*	
				上下
			*/
			lb->clineposy = origclineposy + (y - starty);
			/*	
				左右
			*/
			lb->zoom = origzoom + (double)(x - startx)/15.0;
			izoom = (int)lb->zoom;
			fzoom = lb->zoom - (double)izoom;
			display();
		}
	}
	/*
		スクロールバー内マウス操作
	*/
	if(x >= lb->boxx && x <= lb->boxx + lb->boxwidth &&
	   y >= lb->boxy && y <= lb->boxy + lb->boxheight){
		if(y < lb->knoby + lb->knobheight && y > lb->knoby){
			origclineindex = lb->clineindex;
			while(getbutton(LEFTMOUSE)){
				mousex = getvaluator(MOUSEX);
				mousey = getvaluator(MOUSEY);
				lastx = x;
				lasty = y;
				x = mousex - origx;	/* ウィンドウ内座標 */
				y = mousey - origy;
	
				lb->clineindex = origclineindex - (y - starty) * lb->nitems / lb->boxheight;
				calcdoi(lb);
				if(lb->clineindex < 0) lb->clineindex = 0;
				if(lb->clineindex >= lb->nitems) lb->clineindex = lb->nitems - 1;
				for(;lb->clineindex >= 0; lb->clineindex--){
					if(lb->displayed[lb->clineindex]) break;
				}
				if(lb->clineindex < 0){
					lb->clineindex = 0;
					for(;lb->clineindex < lb->nitems; lb->clineindex++){
						if(lb->displayed[lb->clineindex]) break;
					}
				}
				display();
			}
		}
		else if(y >= lb->knoby + lb->knobheight){
			int v;
			while(getbutton(LEFTMOUSE)){
				mousey = getvaluator(MOUSEY);
				lasty = y;
				y = mousey - origy;
				v = y - (lb->knoby + lb->knobheight);
				v /= 3;
				if(v >= lb->lineheight) v = lb->lineheight;
				
				if(lb->clineposy - v >= 0){
					lb->clineposy -= v;
				}
				else {
					lb->clineposy = lb->itempos[-1];
					lb->clineindex = lb->itemindex[-1];
					lb->clineposy -= v;
				}
				display();
			}
		}
		else if(y <= lb->knoby){
			int v;
			while(getbutton(LEFTMOUSE)){
				mousey = getvaluator(MOUSEY);
				lasty = y;
				y = mousey - origy;
				v = lb->knoby - y;
				v /= 3;
				if(v >= lb->lineheight) v = lb->lineheight;
				
				if(lb->clineposy + v < lb->height - lb->lineheight){
					lb->clineposy += v;
				}
				else {
					lb->clineposy = lb->itempos[1];
					lb->clineindex = lb->itemindex[1];
					lb->clineposy += v;
				}
				display();
			}
		}
	}
}

calcmatch(LensBar *lb, char *pattern)
{
	register int i,j;
	int mismatch;
	int nmatch;
	char pat[100];
	int zoom,pow;

	if(strcmp(lb->oldpat,pattern) == 0) return;
	strcpy(lb->oldpat,pattern);

	sprintf(pat,"%s ",pattern);
	for(mismatch=0;mismatch<MAXMISMATCH ;mismatch++){
		makepat(pat,mismatch);
		for(i=nmatch=0;i<lb->nitems;i++){
			nmatch += (lb->matched[i] = match((unsigned char*)(lb->pats[i])) ? 1 : 0);
		}
		if(nmatch) break;
	}
	lb->mismatch = mismatch;
	if(!nmatch) return;
	lb->zoom = 0.0;
	if(! lb->matched[lb->clineindex]){
		for(i=j=0;i<lb->nitems;i++){
			if(lb->matched[i]){
				if(++j > nmatch/2){
					lb->clineindex = i;
					break;
				}
			}
		}
		lb->clineposy = lb->height / 2;
	}

	calcdoi(lb); // 重要度を計算!!!
}

static int
bits(int n) // nを表現するのに必要なビット数
{
	int i,b;
	i = 1;
	for(b=0;i<n;b++){
		i *= 2;
	}
	if(b == 0) b = 1;
	return b;
}

calcdoi(LensBar *lb)
{
	int d,i,j,k,count,mask;
	int maxdoi = -1;
	char *s;
	int n;
	count = 0;
	for(i=lb->clineindex;i>=0;i--){
		if(! lb->matched[i]){
			lb->doi[i] = 100;
		}
		else {
			for(mask=1,j=0;j<lb->pow;j++,mask<<=1){
				if(mask & count) break;
			}
			lb->doi[i] = -j;
			count++;
		}
	}
	count = 0;
	for(i=lb->clineindex;i<lb->nitems;i++){
		if(! lb->matched[i]){
			lb->doi[i] = 100;
		}
		else {
			for(mask=1,j=0;j<lb->pow;j++,mask<<=1){
				if(mask & count) break;
			}
			lb->doi[i] = -j;
			count++;
		}
	}
}
